openapi: "3.0.0"
info:
    version: "1.1.0"
    title: "Expense Tracker API"
    description: CRUD management of Expense Tracker
servers:
  - url: /api/v1
  
paths:
    /categories:
        get:
            operationId: GetAllCategories
            parameters:
                - in: query
                  name: offset
                  schema:
                      type: integer
                  description: The number of items to skip before starting to collect the result set
                - in: query
                  name: limit
                  schema:
                      type: integer
                  description: The numbers of items to return
            summary: Fetch a list of categories
            responses:
                200:
                    description: A list of categories
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    data:
                                        type: array
                                        items:
                                            $ref: "#/components/schemas/CategoryDTO"
                                    pagination:
                                        $ref: "#/components/schemas/PaginationDTO"
                                required:
                                    - data
                                    - pagination
                500:
                    description: Unexpected error
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/ErrorDTO"
        post:
            operationId: AddCategory
            summary: Create a new category entry
            requestBody:
                description: Category payload
                content:
                    "application/json":
                        schema:
                            $ref: "#/components/schemas/CreateCategoryDTO"
            responses:
                201:
                    description: The newly created category
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/CategoryDTO"
                500:
                    description: Unexpected error
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/ErrorDTO"

    /categories/{id}:
        parameters:
            - in: path
              name: id
              description: The unique identifier
              required: true
              schema:
                  $ref: "#/components/schemas/Id"
        get:
            operationId: GetCategory
            summary: Fetch a category
            responses:
                200:
                    description: A category
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/CategoryDTO"
                404:
                    description: No category found for the provided `Id`
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/ErrorDTO"
                500:
                    description: Unexpected error
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/ErrorDTO"
        put:
            operationId: UpdateCategory
            summary: Update an existing category entry
            requestBody:
                description: Category payload
                content:
                    "application/json":
                        schema:
                            $ref: "#/components/schemas/UpdateCategoryDTO"
            responses:
                204:
                    description: The newly created category
                500:
                    description: Unexpected error
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/ErrorDTO"
        delete:
            operationId: DeleteCategory
            summary: Delete an category
            responses:
                200:
                    description: A category deleted
                404:
                    description: No category found for the provided `Id`
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/ErrorDTO"
                500:
                    description: Unexpected error
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/ErrorDTO"

    /expenses:
        get:
            operationId: GetAllExpenses
            parameters:
                - in: query
                  name: offset
                  schema:
                      type: integer
                  description: The number of items to skip before starting to collect the result set
                - in: query
                  name: limit
                  schema:
                      type: integer
                  description: The numbers of items to return
            summary: Fetch a list of expenses
            responses:
                200:
                    description: A list of expenses
                    content:
                        application/json:
                            schema:
                                type: object
                                properties: 
                                    data:
                                        type: array
                                        items:
                                            $ref: "#/components/schemas/ExpenseDTO"
                                    pagination:
                                        $ref: "#/components/schemas/PaginationDTO"
                                required:
                                    - data
                                    - pagination
                500:
                    description: Unexpected error
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/ErrorDTO"
        post:
            operationId: AddExpense
            summary: Create a new expense entry
            requestBody:
                description: Expense payload
                content:
                    "application/json":
                        schema:
                            $ref: "#/components/schemas/CreateExpenseDTO"
            responses:
                201:
                    description: The newly created expense
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/ExpenseDTO"
                500:
                    description: Unexpected error
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/ErrorDTO"

    /expenses/{id}:
        parameters:
            - in: path
              name: id
              description: The unique identifier
              required: true
              schema:
                  $ref: "#/components/schemas/Id"
        get:
            operationId: GetExpense
            summary: Fetch a expense
            responses:
                200:
                    description: A expense
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/ExpenseDTO"
                404:
                    description: No expense found for the provided `Id`
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/ErrorDTO"
                500:
                    description: Unexpected error
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/ErrorDTO"
        put:
            operationId: UpdateExpense
            summary: Update an existing expense entry
            requestBody:
                description: Expense payload
                content:
                    "application/json":
                        schema:
                            $ref: "#/components/schemas/UpdateExpenseDTO"
            responses:
                204:
                    description: The newly created expense
                500:
                    description: Unexpected error
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/ErrorDTO"
        delete:
            operationId: DeleteExpense
            summary: Delete an expense
            responses:
                200:
                    description: A expense deleted
                404:
                    description: No expense found for the provided `Id`
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/ErrorDTO"
                500:
                    description: Unexpected error
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/ErrorDTO"

    /incomes:
        get:
            operationId: GetAllIncomes
            parameters:
                - in: query
                  name: offset
                  schema:
                      type: integer
                  description: The number of items to skip before starting to collect the result set
                - in: query
                  name: limit
                  schema:
                      type: integer
                  description: The numbers of items to return
            summary: Fetch a list of incomes
            responses:
                200:
                    description: A list of incomes
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    data:
                                        type: array
                                        items:
                                            $ref: "#/components/schemas/IncomeDTO"
                                    pagination:
                                        $ref: "#/components/schemas/PaginationDTO"
                                required:
                                    - data
                                    - pagination
                500:
                    description: Unexpected error
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/ErrorDTO"
        post:
            operationId: AddIncome
            summary: Create a new income entry
            requestBody:
                description: Income payload
                content:
                    "application/json":
                        schema:
                            $ref: "#/components/schemas/CreateIncomeDTO"
            responses:
                201:
                    description: The newly created incomes
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/IncomeDTO"
                500:
                    description: Unexpected error
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/ErrorDTO"

    /incomes/{id}:
        parameters:
            - in: path
              name: id
              description: The unique identifier
              required: true
              schema:
                  $ref: "#/components/schemas/Id"
        get:
            operationId: GetIncome
            summary: Fetch a income
            responses:
                200:
                    description: A income
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/IncomeDTO"
                404:
                    description: No income found for the provided `Id`
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/ErrorDTO"
                500:
                    description: Unexpected error
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/ErrorDTO"
        put:
            operationId: UpdateIncome
            summary: Update an existing income entry
            requestBody:
                description: Income payload
                content:
                    "application/json":
                        schema:
                            $ref: "#/components/schemas/UpdateIncomeDTO"
            responses:
                204:
                    description: The newly created income
                500:
                    description: Unexpected error
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/ErrorDTO"
        delete:
            operationId: DeleteIncome
            summary: Delete an income
            responses:
                200:
                    description: A income deleted
                404:
                    description: No income found for the provided `Id`
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/ErrorDTO"
                500:
                    description: Unexpected error
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/ErrorDTO"

components:
    schemas:
        Id:
            description: The unique identifier
            type: string
            format: uuid
            nullable: false
        
        CategoryDTO:
            type: object
            properties:
                id:
                    $ref: "#/components/schemas/Id"
                name:
                    type: string

        CreateCategoryDTO:
            type: object
            properties:
                name:
                    type: string
        
        UpdateCategoryDTO:
            type: object
            properties:
                name:
                    type: string

        ExpenseDTO:
            type: object
            properties:
                id:
                    $ref: "#/components/schemas/Id"
                title:
                    type: string
                description:
                    type: string
                date:
                    type: string
                category:
                    $ref: "#/components/schemas/CategoryDTO"

        CreateExpenseDTO:
            type: object
            properties:
                title:
                    type: string
                description:
                    type: string
                date:
                    type: string
                category_id:
                    $ref: "#/components/schemas/Id"
        
        UpdateExpenseDTO:
            type: object
            properties:
                title:
                    type: string
                description:
                    type: string
                date:
                    type: string
                category_id:
                    $ref: "#/components/schemas/Id"

        IncomeDTO:
            type: object
            properties:
                id:
                    $ref: "#/components/schemas/Id"
                title:
                    type: string
                description:
                    type: string
                date:
                    type: string
                category:
                    $ref: "#/components/schemas/CategoryDTO"

        CreateIncomeDTO:
            type: object
            properties:
                title:
                    type: string
                description:
                    type: string
                date:
                    type: string
                category_id:
                    $ref: "#/components/schemas/Id"
        
        UpdateIncomeDTO:
            type: object
            properties:
                title:
                    type: string
                description:
                    type: string
                date:
                    type: string
                category_id:
                    $ref: "#/components/schemas/Id"

        PaginationDTO:
            type: object
            properties:
                page:
                   type: integer
                per_page:
                   type: integer
                total_records:
                   type: integer
            required:
                - page
                - per_page
                - total_records

        ErrorDTO:
            type: object
            required:
                - message
            properties:
                message:
                    description: A human readable error message
                    type: string

    securitySchemes:
        bearerAuth:
            type: http
            scheme: bearer
            bearerFormat: JWT
security:
    - bearerAuth: []